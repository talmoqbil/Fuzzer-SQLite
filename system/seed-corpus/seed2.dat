-- Seed 2: Alter table and add constraints 
CREATE TABLE department (
    dept_id INTEGER PRIMARY KEY, 
    dept_name VARCHAR(50)
);

INSERT INTO department (dept_name) 
VALUES ('HR'), ('Engineering');

CREATE TABLE employee (
    emp_id INTEGER PRIMARY KEY, 
    emp_name TEXT, 
    salary REAL
);

INSERT INTO employee (emp_name, salary) 
VALUES ('John Doe', 55000.75), ('Jane Smith', 60000.50);

-- Alter the employee table to add new columns: dept_id and hire_date
ALTER TABLE employee ADD COLUMN dept_id INTEGER;
ALTER TABLE employee ADD COLUMN hire_date DATE DEFAULT '2023-01-01';

-- Update existing records to associate employees with departments and hire date
UPDATE employee 
SET dept_id = 1, hire_date = '2021-05-10' 
WHERE emp_name = 'John Doe';

UPDATE employee 
SET dept_id = 2, hire_date = '2022-06-15' 
WHERE emp_name = 'Jane Smith';

-- REPLACE operation: Replacing an existing employee by the same primary key
-- If 'John Doe' already exists with emp_id = 1, this will replace that row
REPLACE INTO employee (emp_id, emp_name, salary, dept_id, hire_date)
VALUES (1, 'John Doe', 58000.00, 1, '2021-05-10');  -- John's salary has been updated

-- Adding a foreign key constraint on dept_id in employee table
PRAGMA foreign_keys = OFF;  -- SQLite requires disabling foreign key checks to alter tables
ALTER TABLE employee 
ADD CONSTRAINT fk_department FOREIGN KEY (dept_id) REFERENCES department(dept_id);
PRAGMA foreign_keys = ON;   -- Re-enable foreign key checks

-- Query to verify data after replace
SELECT emp_name, salary, dept_name, hire_date
FROM employee
JOIN department ON employee.dept_id = department.dept_id;
